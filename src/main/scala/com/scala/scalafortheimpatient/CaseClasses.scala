package com.scala.scalafortheimpatient

object CaseClasses {

  def main(args: Array[String]): Unit = {

    abstract class Amount
    case class Currency(value: Double, code: String) extends Amount
    case class Dollar(value: Double) extends Amount

    // case class is by default equivalent to:
    class Dollar2(val value: Double) extends Amount {
      // autogenerated toString, equals, hashCode, copy
    }
    // Plus companion object
    object Dollar2 {
      def apply(value: Double) = new Dollar2(value)
      def unapply(arg: Dollar2): Option[Double] = Some(arg.value)
    }


    // Compiler error: case-to-case inheritance is prohibited.
    // case class Uber(u: Double) extends Dollar(u)


    // sealed for exhaustive case in pattern matching
    // all subclasses for sealed must be defined in the same file
    sealed abstract class Elem
    case class One() extends Elem
    case class Two() extends Elem

    sealed abstract class Color
    case object Red extends Color
    case object Blue extends Color


  }

}
